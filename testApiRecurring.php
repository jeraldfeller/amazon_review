<?php//echo PHP_INT_SIZE; exit;header('Content-Type: text/plain; charset=ISO-8859-1');ini_set('max_execution_time', 3000);ini_set('default_charset', 'ISO-8859-1');date_default_timezone_set("Europe/Rome");require_once "vendor/autoload.php";use Keepa\API\Request;use Keepa\API\ResponseStatus;use Keepa\helper\CSVType;use Keepa\helper\CSVTypeWrapper;use Keepa\helper\KeepaTime;use Keepa\helper\ProductAnalyzer;use Keepa\helper\ProductType;use Keepa\KeepaAPI;use Keepa\objects\AmazonLocale;use Keepa\objects\Offer;require_once "connection.php";$query = "SELECT Assins, Local FROM esq_recurr_leads WHERE DATE(modifiedDate) <> DATE(NOW()) OR modifiedDate IS NULL LIMIT 40 ";//echo $query; exit;$result=mysql_query($query);while($row = mysql_fetch_array($result)) {//echo $row['Assins'].'</br>'; exit;$strassin = $row['Assins'];$localdomain = strtoupper(trim($row['Local']));$localId = 0;if($localdomain == 'IT') {   $localId = 8; } else if($localdomain == 'DE') {    $localId = 3; } else if($localdomain == 'FR') {    $localId = 4; } else if($localdomain == 'ES') {    $localId = 9; } else if($localdomain == 'CO.UK') {    $localId = 2; } else {    $localId = 0; }$update_leads_table = "UPDATE `esq_recurr_leads` SET `modifiedDate` = NOW() WHERE `Assins` LIKE '".$row['Assins']."'";mysql_query($update_leads_table);//echo $strassin.'***'.$localdomain; exit;        $api = new KeepaAPI("4kcnsp1ti040clvupbm2mmh36o0v1o9l73ehgfiprbj3fj13pr9h7gm9gk0p4l2t");        //$r = Request::getProductRequest(AmazonLocale::IT, 0, "2015-12-31", "2018-01-01", 0, true, ['B001SEQKJ2']);         //$r = Request::getProductRequest(AmazonLocale::IT, 0, "2015-12-31", "2018-01-01", 0, true, $list_assin);B01LZZ8159        //$r = Request::getProductRequest(AmazonLocale::IT, 20, "2016-12-31", "2018-12-31", 0, true, [$strassin], ["rating" => 1]);        $r = Request::getProductRequest($localId, 20, "2016-12-31", "2018-12-31", 0, true, [$strassin], ["rating" => 1]);                $response = $api->sendRequestWithRetry($r);        // echo '<pre>';        // print_r($response);        // exit;        $ratings = '';        $ratings_count = '';            switch ($response->status) {                case ResponseStatus::OK:                    // iterate over received product information                    foreach ($response->products as $product){                        if ($product->productType == ProductType::STANDARD || $product->productType == ProductType::DOWNLOADABLE) {                        $ratings = "";                            $ratings_count = "";                            if($product->hasReviews == 1 && !(empty($product->csv[CSVType::RATING]))) {                                if(!empty($product->csv[CSVType::RATING])) {                                    $ratings = end($product->csv[CSVType::RATING]);                                }                                if(!empty($product->csv[CSVType::COUNT_REVIEWS])) {                                    $ratings_count = end($product->csv[CSVType::COUNT_REVIEWS]);                                }                            }                            $currentAmazonPrice = ProductAnalyzer::getLast($product->csv[CSVType::AMAZON], CSVTypeWrapper::getCSVTypeFromIndex(CSVType::AMAZON));                                                        $rootcatName = "";                            $languages = "";                            $LIGHTNING_DEAL = "";                            $total_used_offer_count = "";                            $new_current = "0";                            $LISTPRICE = "0";                            $variationAssins = "";                            if(!empty($product->csv[CSVType::COUNT_USED])) {                            $total_used_offer_count = end($product->csv[CSVType::COUNT_USED]);                            }                            if(!empty($product->csv[CSVType::MARKET_NEW])) {                            $new_current = end($product->csv[CSVType::MARKET_NEW]);                            }                            if($product->rootCategory!="") {                            $requestcat = Request::getCategoryLookupRequest($localId, false, $product->rootCategory);                            $responsecat = $api->sendRequestWithRetry($requestcat);                            $rootcatName = $responsecat->categories[$product->rootCategory]->name;                            }                                                                                  $new_90daysavg = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::MARKET_NEW], KeepaTime::nowMinutes(),30, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::MARKET_NEW));                           //echo $new_90daysavg; exit;                  //echo 'Hi3'; exit;                            if($product->languages !="" && $product->languages!=-1) {                                $languages = implode(', ', end($product->languages));                            }                            $sales_rank_90 = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::SALES], KeepaTime::nowMinutes(),30, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::SALES));                            $LIGHTNING_DEAL = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::LIGHTNING_DEAL], KeepaTime::nowMinutes(),90, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::LIGHTNING_DEAL));                           if(!empty($product->csv[CSVType::LISTPRICE])) {                            $LISTPRICE = end($product->csv[CSVType::LISTPRICE]);                            }                             $LISTPRICE_90daysavg = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::LISTPRICE], KeepaTime::nowMinutes(),30, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::LISTPRICE));                            $NEW_Offer_count_90days = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::COUNT_NEW], KeepaTime::nowMinutes(),90, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::COUNT_NEW));                            //$USED_Offer_count_90days = "";                            $Buy_Box_90days = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::BUY_BOX_SHIPPING], KeepaTime::nowMinutes(),30, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::BUY_BOX_SHIPPING));                            if($LIGHTNING_DEAL== -1){                                $LIGHTNING_DEAL = "";                            }                            if($product->variationCSV!="") {                                $variationAssins = $product->variationCSV;                            }                // echo '<pre>';                // print_r($product);                // exit;                            $avg30daysBuybox = "";                            //echo sizeof($product->stats->avg30); exit;                            if(sizeof($product->stats->avg30) > 17) {                                 $avg30daysBuybox = $product->stats->avg30[18];                             }                            $buyBoxseller = "";                            if(!empty($product->buyBoxSellerIdHistory)) {                                $buyBoxseller = implode(', ',$product->buyBoxSellerIdHistory);                            }                            $is_subscriber = "No";                            if(!empty($product->isSNS)) {                                $is_subscriber = "Yes";                            }                                                                    //check if the product is in stock -1 -> out of stock                            $amazonproce = '';                            $amazonstatus = '';                            if ($currentAmazonPrice == -1) {                                //echo sprintf("%s %s is currently out of stock! %s",$product->asin,$product->title,PHP_EOL);                                $amazonproce = $currentAmazonPrice;                                $amazonstatus = 'Out of Stock';                            } else {                                //echo sprintf("%s %s Current Amazon Price: %s %s",$product->asin,$product->title,$currentAmazonPrice,PHP_EOL);                                $amazonproce = $currentAmazonPrice;                                $amazonstatus = 'Active';                            }                            // get weighted mean of the last 90 days for Amazon                            $weightedMean90days = ProductAnalyzer::calcWeightedMean($product->csv[CSVType::AMAZON], KeepaTime::nowMinutes(),30, CSVTypeWrapper::getCSVTypeFromIndex(CSVType::AMAZON));                                                    $amaZon30days = reset($product->stats->avg30);                        //echo '****'.$weightedMean90days; exit;                        //Now written code to store result into database                            $frequentlyBoughtTogether="";                            if(!empty($product->frequentlyBoughtTogether)) {                                $frequentlyBoughtTogether=implode(', ',$product->frequentlyBoughtTogether);                            }                            $Amazon_90_days_OOS = "";                            if(!empty($product->stats->outOfStockPercentageInInterval)) {                                $Amazon_90_days_OOS = reset($product->stats->outOfStockPercentageInInterval);                            }                        $is_prime = "No";                        if($product->isEligibleForSuperSaverShipping == 1) {                            $is_prime = "Yes";                        }                        $fullimage_url = "";                            if($product->imagesCSV!="") {                                $raw_image_name = explode(',', $product->imagesCSV);                                $img_full_url = "";                                $img_url = "https://images-eu.ssl-images-amazon.com/images/I/";                                foreach ($raw_image_name as $key => $value) {                                    //echo $img_url.$value;                                    //$fullimg = array($img_url.$value);                                    $img_full_url .= $img_url.$value.', ';                                }                                $fullimage_url = trim($img_full_url, ', ');                            }                          $esq_assin_details = array(                                                        "ASIN"=>$product->asin,                                                        "Locale"=>$localdomain,                                                        "Title"=>$product->title,                                                        "Image"=>$fullimage_url,                                                        "Sales_Rank_Current"=> end($product->csv[3]),                                                        "Sales_Rank_30dayavg" => $sales_rank_90,                                                        "Reviews"=> $ratings,                                                        "Review_Count"=> $ratings_count,                                                        "Amazon_current" => $currentAmazonPrice,                                                        "Amazon_30_days_avg" => $amaZon30days,                                                        "Amazon_90_days_OOS"=> $Amazon_90_days_OOS,                                                        "Amazon_Stock"=> $product->stats->stockAmazon,                                                        "New_Current"=> $new_current,                                                        "New_30daysavg"=> $new_90daysavg,                                                        "List_Price"=> $LISTPRICE,                                                        "LISTPRICE_30daysavg"=> $LISTPRICE_90daysavg,                                                        "Lightning_Deals"=> $LIGHTNING_DEAL,                                                        "Total_New_Offer_Count"=>$product->stats->totalOfferCount,                                                        "NEW_OFFER_90days"=>$NEW_Offer_count_90days,                                                        "stockBuyBox"=> $product->stats->stockBuyBox,                                                        "Buy_Box_Current"=>$product->stats->buyBoxPrice,                                                        "Buy_Box_30days" => $avg30daysBuybox,                                                        "Buy_Box_Seller"=>$buyBoxseller,                                                        "buyBoxIsAmazon"=>$product->stats->buyBoxIsAmazon,                                                        "rootCategory"=>$rootcatName,                                                        "variationCSV"=>$variationAssins,                                                        "Manufacturer"=>$product->manufacturer,                                                        "Brand"=>$product->brand,                                                        "Product_Group"=>$product->productGroup,                                                        "Number_of_Items"=>$product->numberOfItems,                                                        "Prime_Eligible"=>$is_prime,                                                        "Publication_Date"=>$product->publicationDate,                                                         "Release_Date"=>$product->releaseDate,                                                        "created_at"=>date('Y-m-d H:i:s')                                                    );// echo '<pre>';// print_r($esq_assin_details);// exit;                              $columns = implode(", ",array_keys($esq_assin_details));                            $escaped_values = array_map('mysql_real_escape_string', array_values($esq_assin_details));                            //$values  = implode(", ", $escaped_values);                            $values  = implode(',', array_map(function($escaped_values) {                                    if(!is_numeric($escaped_values)) {                                        return "'" . $escaped_values . "'";                                        //adds double quotes, but if you prefer single quotes, use:                                        //return "'" . $value . "'";                                    } else {                                        return $escaped_values;                                    }                                }, $escaped_values));                            $assin_insert_query = "INSERT INTO `esq_recurring_assin_details`($columns) VALUES ($values)";                            //echo $assin_insert_query;                            //exit;                            mysql_query($assin_insert_query);                        } else {                        }                    }                    break;                default:                    //print_r($response);                unset($response);            }        } 